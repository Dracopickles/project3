{"version":3,"sources":["tv-icon.png","components/Header.js","components/Login.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","tv","alt","React","Component","Login","Form","Group","controlId","Label","Control","type","placeholder","Text","Check","label","Button","variant","App","components_Header","components_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oQCkBzBC,mLATX,OACJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAIF,UAAU,WAAWG,IAAI,OACvCN,EAAAC,EAAAC,cAAA,wCAPqBK,IAAMC,0BCgCZC,mLAzBX,OACJT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpBZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKG,MAAN,sBACAb,EAAAC,EAAAC,cAACQ,EAAA,EAAKI,QAAN,CAAcC,KAAK,QAAQC,YAAY,gBACvChB,EAAAC,EAAAC,cAACQ,EAAA,EAAKO,KAAN,CAAWd,UAAU,cAArB,mDAKFH,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpBZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKG,MAAN,iBACAb,EAAAC,EAAAC,cAACQ,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,cAE5ChB,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpBZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,MAAN,CAAYH,KAAK,WAAWI,MAAM,kBAEpCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,UAA/B,kBArBkBR,IAAMC,WCeXc,0LAfX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAAA,qCAGAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,wBACuBH,EAAAC,EAAAC,cAAA,0BADvB,gCATUM,cCIZiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEN7B,EAwCX,SAAiCO,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BT,OAAOC,SAASsC,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAzDAsB,CAAwBnC,GAHxBD,EAAgBC,MC7BxBoC","file":"static/js/main.94509c3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tv-icon.f99dc49c.png\";","import tv from \"../tv-icon.png\";\nimport React from \"react\";\n// import \"./App.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Header extends React.Component {\n  // Setting the initial state of the Counter component\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n<div className=\"App-header\">\n<img src={tv} className=\"App-logo\" alt=\"tv\" />\n<h2>Welcome to Watcher</h2>\n</div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\n\n// import \"./App.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Login extends React.Component {\n  // Setting the initial state of the Counter component\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n<Form>\n  <Form.Group controlId=\"formBasicEmail\">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\" />\n    <Form.Text className=\"text-muted\">\n      We'll never share your email with anyone else.\n    </Form.Text>\n  </Form.Group>\n\n  <Form.Group controlId=\"formBasicPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\" />\n  </Form.Group>\n  <Form.Group controlId=\"formBasicCheckbox\">\n    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n  </Form.Group>\n  <Button variant=\"primary\" type=\"submit\">\n    Submit\n  </Button>\n</Form>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\"\nimport Login from \"./components/Login\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Login />\n        <div>\n          [footer] karl was here\n        </div>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}